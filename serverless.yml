service: virtualwatercooler

# Create an optimized package for our functions 
package:
  individually: true

plugins:
  - serverless-bundle # Package our functions with Webpack
  - serverless-offline
  - serverless-dotenv-plugin # Load .env as environment variables

custom:
  # Our stage is based on what is passed in when running serverless
  # commands. Or fallsback to what we have set in the provider section.
  stage: ${opt:stage, self:provider.stage}
  # Set the table name here so we can use it while testing locally
  mainTableName: ${self:custom.stage}-MainTable
  prodUrl: https://virtualwatercooler.xyz
  devUrl: http://localhost:3000

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: eu-west-1
  environment:
    MAIN_TABLE: ${self:custom.mainTableName}
    STAGE: ${opt:stage, self:provider.stage}
    POST_CONFIRMATION_LAMBDA: arn:aws:lambda:${self:provider.region}:866195672519:function:${self:service}-${self:custom.stage}-postConfirmation
  # To load environment variables externally
  # rename env.example to .env and uncomment
  # the following line. Also, make sure to not
  # commit your .env.
  #  SAMPLE_ENV_VAR: ${env:SAMPLE_ENV_VAR}
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - "Fn::GetAtt": [ MainTable, Arn]
    - Effect: "Allow"
      Action:
        - ses:SendEmail
      Resource:
        - "*"
    - Effect: "Allow"
      Action:
        - lambda:InvokeFunction
      Resource:
        - arn:aws:lambda:${self:provider.region}:866195672519:function:${self:service}-${self:custom.stage}-emailConfirmUsers
    - Effect: "Allow"
      Action:
        - events:putRule
        - events:putTargets
        - events:describeRule
        - events:removeTargets
        - events:deleteRule
      Resource:
        - "*"
  iamManagedPolicies:
    - 'arn:aws:iam::aws:policy/AmazonCognitoReadOnly'

functions:
  add:
    handler: add.main
    environment:
      EMAIL_CONFIRM_LAMBDA: virtualwatercooler-${self:custom.stage}-emailConfirmUsers
    events:
      - http:
          path: users
          method: post
          request:
            schema:
              application/json: ${file(validation/add_request.json)}
          cors: true
          authorizer: aws_iam
  list:
    handler: list.main
    events:
      - http:
          path: users
          method: get
          cors: true
          authorizer: aws_iam
  pair:
    handler: pair.main
    events:
      - http:
          path: pair
          method: post
          cors: true
          authorizer: aws_iam
  postConfirmation:
    handler: postConfirmation.main
  emailPairs:
    handler: emailPairs.main
    environment:
      PROD_URL: ${self:custom.prodUrl}
      DEV_URL: ${self:custom.devUrl}
    events:
      - http:
          path: emailPairs
          method: post
          cors: true
          authorizer: aws_iam
  emailConfirmUsers:
    handler: emailConfirmUsers.main
    environment:
      PROD_URL: ${self:custom.prodUrl}
      DEV_URL: ${self:custom.devUrl}
  confirm:
    handler: confirmUser.main
    events:
      - http:
          path: confirm
          method: post
          cors: true
          authorizer: aws_iam
  requestUnsubscribe:
    handler: requestUnsubscribe.main
    environment:
      PROD_URL: ${self:custom.prodUrl}
      DEV_URL: ${self:custom.devUrl}
    events:
      - http:
          path: unsubscribe/request
          method: post
          cors: true
          authorizer: aws_iam
  confirmUnsubscribe:
    handler: confirmUnsubscribe.main
    events:
      - http:
          path: unsubscribe/confirm
          method: post
          cors: true
          authorizer: aws_iam
  recurringPairAndEmail:
    handler: recurringPairAndEmail.main
    environment:
      PROD_URL: ${self:custom.prodUrl}
      DEV_URL: ${self:custom.devUrl}
  manageRecurrenceRules:
    handler: manageRecurrenceRules.main
    environment:
      RECURRING_PAIRANDEMAIL_LAMBDA_ARN: arn:aws:lambda:${self:provider.region}:866195672519:function:${self:service}-${self:custom.stage}-recurringPairAndEmail
    events:
      - http:
          path: rules
          method: post
          cors: true
          authorizer: aws_iam

resources:
  - ${file(resources/api-gateway-errors.yml)}
  - ${file(resources/cognito-user-pool.yml)}
  - ${file(resources/cognito-identity-pool.yml)}
  - ${file(resources/dynamodb-tables.yml)}
  - Resources:
      PostConfirmationTriggerInvokePermission:
        Type: AWS::Lambda::Permission
        Properties:
          Action: lambda:InvokeFunction
          Principal: cognito-idp.amazonaws.com
          SourceArn:
            Fn::GetAtt: [ "CognitoUserPool", "Arn" ]
          FunctionName: "${self:provider.environment.POST_CONFIRMATION_LAMBDA}"
      RecurringPairAndEmailInvokePermission:
        Type: AWS::Lambda::Permission
        DependsOn: RecurringPairAndEmailLambdaFunction
        Properties:
          Action: lambda:InvokeFunction
          Principal: events.amazonaws.com
          SourceArn:
            Fn::Sub: "arn:aws:events:${self:provider.region}:866195672519:rule/*"
          FunctionName: arn:aws:lambda:${self:provider.region}:866195672519:function:${self:service}-${self:custom.stage}-recurringPairAndEmail